{"version":3,"sources":["../src/actions/executeSwap.ts","../src/actions/swapTemplate.ts","../src/actions/utils.ts","../src/environment.ts","../src/actions/txns.ts","../src/actions/chains.ts","../src/index.ts"],"sourcesContent":["import {\n    composeContext,\n    elizaLogger,\n    generateObjectDeprecated,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    ModelClass,\n    type State\n} from \"@elizaos/core\";\nimport { swapTemplate } from \"./swapTemplate.ts\";\nimport { ChainUtils, fetchChains, fetchPathfinderQuote, fetchTokenConfig } from \"./utils.ts\";\nimport { validateRouterNitroConfig } from \"../environment.ts\";\nimport { checkAndSetAllowance, checkNativeTokenBalance, checkUserBalance, getSwapTransaction } from \"./txns.ts\";\nimport { ethers } from \"ethers\";\nimport { getBlockExplorerFromChainId, getRpcUrlFromChainId } from \"./chains.ts\";\n\n// Types\ninterface PathfinderDestinationAsset {\n    decimals: number;\n}\n\ninterface PathfinderDestination {\n    tokenAmount: string;\n    asset: PathfinderDestinationAsset;\n}\n\ninterface PathfinderResponse {\n    destination: PathfinderDestination;\n    allowanceTo: string;\n}\n\ninterface SwapContent {\n    fromChain: string;\n    toChain: string;\n    fromToken: string;\n    toToken: string;\n    amount: string;\n    toAddress: string;\n}\n\n// Helper functions\nconst validateAddress = (address: string): boolean => \n    typeof address === \"string\" && address.startsWith(\"0x\") && address.length === 42;\n\nconst initializeWallet = async (runtime: IAgentRuntime, rpc: string) => {\n    const privateKey = runtime.getSetting(\"ROUTER_NITRO_EVM_PRIVATE_KEY\");\n    if (!privateKey) {\n        throw new Error(\"Private key is missing. Please set ROUTER_NITRO_EVM_PRIVATE_KEY in the environment settings.\");\n    }\n    const provider = new ethers.JsonRpcProvider(rpc);\n    return new ethers.Wallet(privateKey, provider);\n};\n\nconst checkBalances = async (wallet: ethers.Wallet, tokenConfig: any, amountIn: bigint) => {\n    const isNativeToken = tokenConfig.address.toLowerCase() === \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\";\n    \n    if (isNativeToken) {\n        const nativeBalance = await checkNativeTokenBalance(wallet, tokenConfig.decimals);\n        if (BigInt(nativeBalance) < amountIn) {\n            throw new Error(\"Insufficient native token balance\");\n        }\n    }\n    \n    const tokenBalance = await checkUserBalance(wallet, tokenConfig.address, tokenConfig.decimals);\n    if (BigInt(tokenBalance) < amountIn) {\n        throw new Error(\"Insufficient token balance\");\n    }\n};\n\nconst handleTransaction = async (\n    wallet: ethers.Wallet, \n    txResponse: any, \n    blockExplorer: string,\n    callback?: HandlerCallback\n) => {\n    const tx = await wallet.sendTransaction(txResponse.txn);\n    const receipt = await tx.wait();\n    \n    if (!receipt?.status) {\n        throw new Error(\"Transaction failed\");\n    }\n    \n    const txExplorerUrl = blockExplorer ? `${blockExplorer}/tx/${tx.hash}` : tx.hash;\n    const successMessage = `Swap completed successfully! Txn: ${txExplorerUrl}`;\n    \n    callback?.({ text: successMessage });\n    return true;\n};\n\nexport const executeSwapAction = {\n    name: \"ROUTER_NITRO_SWAP\",\n    description: \"Swaps tokens across chains from the agent's wallet to a recipient wallet.\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State | undefined,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        elizaLogger.log(\"Starting ROUTER_NITRO_SWAP handler...\");\n\n        try {\n            // State initialization\n            const updatedState = state ? \n                await runtime.updateRecentMessageState(state) : \n                await runtime.composeState(message);\n\n            // Generate swap content\n            const swapContext = composeContext({ state: updatedState, template: swapTemplate });\n            const content = await generateObjectDeprecated({\n                runtime,\n                context: swapContext,\n                modelClass: ModelClass.LARGE,\n            }) as SwapContent;\n\n            // Validate and set address\n            if (!validateAddress(content.toAddress)) {\n                content.toAddress = runtime.getSetting(\"ROUTER_NITRO_EVM_ADDRESS\");\n            }\n\n            // Initialize chain data\n            const chainUtils = new ChainUtils(await fetchChains());\n            const swapDetails = chainUtils.processChainSwap(content.fromChain, content.toChain);\n            \n            if (!swapDetails.fromChainId || !swapDetails.toChainId) {\n                throw new Error(\"Invalid chain data details\");\n            }\n\n            // Initialize wallet\n            const rpc = getRpcUrlFromChainId(swapDetails.fromChainId);\n            const wallet = await initializeWallet(runtime, rpc);\n            const address = await wallet.getAddress();\n\n            // Fetch token configurations\n            const [fromTokenConfig, toTokenConfig] = await Promise.all([\n                fetchTokenConfig(Number(swapDetails.fromChainId), content.fromToken),\n                fetchTokenConfig(Number(swapDetails.toChainId), content.toToken)\n            ]);\n\n            // Calculate amount and check balances\n            const amountIn = BigInt(Math.floor(Number(content.amount) * 10 ** fromTokenConfig.decimals));\n            await checkBalances(wallet, fromTokenConfig, amountIn);\n\n            // Get pathfinder quote and process swap\n            const pathfinderResponse = await fetchPathfinderQuote({\n                fromTokenAddress: fromTokenConfig.address,\n                toTokenAddress: toTokenConfig.address,\n                amount: amountIn.toString(),\n                fromTokenChainId: Number(swapDetails.fromChainId),\n                toTokenChainId: Number(swapDetails.toChainId),\n                partnerId: 127,\n            }) as PathfinderResponse;\n\n            if (pathfinderResponse) {\n                await checkAndSetAllowance(\n                    wallet,\n                    fromTokenConfig.address,\n                    pathfinderResponse.allowanceTo,\n                    amountIn\n                );\n\n                const txResponse = await getSwapTransaction(pathfinderResponse, address, content.toAddress);\n                const blockExplorer = getBlockExplorerFromChainId(swapDetails.fromChainId).url;\n                \n                return await handleTransaction(wallet, txResponse, blockExplorer, callback);\n            }\n\n            return false;\n        } catch (error) {\n            elizaLogger.log(`Error during executing swap: ${error.message}`);\n            callback?.({ text: `Error during swap: ${error.message}` });\n            return false;\n        }\n    },\n\n    template: swapTemplate,\n    validate: async (runtime: IAgentRuntime) => {\n        await validateRouterNitroConfig(runtime);\n        return true;\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Bridge 1 ETH from Ethereum to Base on address 0xCCa8009f5e09F8C5dB63cb0031052F9CB635Af62\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"Sure, I'll send 1 ETH from Ethereum to Base\",\n                    action: \"ROUTER_NITRO_SWAP\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"Successfully sent 1 ETH to 0xCCa8009f5e09F8C5dB63cb0031052F9CB635Af62 on Base\\nTransaction: 0x4fed598033f0added272c3ddefd4d83a521634a738474400b27378db462a76ec\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Please swap 1 ETH into USDC from Avalanche to Base on address 0xF43042865f4D3B32A19ECBD1C7d4d924613c41E8\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"Sure, I'll swap 1 ETH into USDC from Solana to Base on address 0xF43042865f4D3B32A19ECBD1C7d4d924613c41E8\",\n                    action: \"ROUTER_NITRO_SWAP\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"Successfully Swapped 1 ETH into USDC and sent to 0xF43042865f4D3B32A19ECBD1C7d4d924613c41E8 on Base\\nTransaction: 2sj3ifA5iPdRDfnkyK5LZ4KoyN57AH2QoHFSzuefom11F1rgdiUriYf2CodBbq9LBi77Q5bLHz4CShveisTu954B\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Send 100 UNI from Arbitrum to Ethereum on 0xCCa8009f5e09F8C5dB63cb0031052F9CB635Af62 \",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"Sure, I'll send 100 UNI to Ethereum right away.\",\n                    action: \"ROUTER_NITRO_SWAP\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"Successfully sent 100 UNI to 0xCCa8009f5e09F8C5dB63cb0031052F9CB635Af62 on Ethereum\\nTransaction: 0x4fed598033f0added272c3ddefd4d83a521634a738474400b27378db462a76ec\",\n                },\n            },\n        ],\n        [\n            {\n                \"user\": \"{{user1}}\",\n                \"content\": {\n                    \"text\": \"Transfer 50 AAVE from Polygon to Optimism on address 0x5C7EDE23cFeBB3A2F60d2D51901A53a276e8F001\",\n                }\n            },\n            {\n                \"user\": \"{{agent}}\",\n                \"content\": {\n                    \"text\": \"Sure, I'll transfer 50 AAVE from Polygon to Optimism\",\n                    \"action\": \"ROUTER_NITRO_SWAP\",\n                }\n            },\n            {\n                \"user\": \"{{agent}}\",\n                \"content\": {\n                    \"text\": \"Successfully transferred 50 AAVE to 0x5C7EDE23cFeBB3A2F60d2D51901A53a276e8F001 on Optimism\\nTransaction: 0x720b46c95f7f819f5d7e1e8df6fd7d8be12b8d06312bb9d96ea85a45fc65079a\",\n                }\n            }\n        ],\n        [\n            {\n                \"user\": \"{{user1}}\",\n                \"content\": {\n                    \"text\": \"Send 1000 USDT from Ethereum to Arbitrum on address 0x456dC2FfE61d8F92A29b9Bd6b32730d345e0638c\",\n                }\n            },\n            {\n                \"user\": \"{{agent}}\",\n                \"content\": {\n                    \"text\": \"Sure, I'll send 1000 USDT from Ethereum to Arbitrum\",\n                    \"action\": \"ROUTER_NITRO_SWAP\",\n                }\n            },\n            {\n                \"user\": \"{{agent}}\",\n                \"content\": {\n                    \"text\": \"Successfully sent 1000 USDT to 0x456dC2FfE61d8F92A29b9Bd6b32730d345e0638c on Arbitrum\\nTransaction: 0x3c72a5fe4d0278f2b46dbe765a5f5dbf2f78cbfdce3d0c2b8f11855969e9e173\",\n                }\n            }\n        ]\n    ],\n    similes: [\"CROSS_CHAIN_SWAP\", \"CROSS_CHAIN_BRIDGE\", \"NITRO_BRIDGE\", \"SWAP\", \"BRIDGE\", \"TRANSFER\"],\n};\n","export const swapTemplate = `Using the provided context and wallet information:\n\n{{recentMessages}}\n\nExtract the following details for the cross-chain swap request:\n- **From Token**: The symbol of the token to swap from.\n- **To Token**: The symbol of the token to swap into (default: same as \"From Token\").\n- **Source Chain**: The chain to swap from.\n- **Destination Chain**: The chain to swap into (default: same as \"Source Chain\").\n- **Amount**: The amount to swap, in the \"From Token.\"\n- **Destination Address**: The address to send the swapped token to (if specified ).\nIf the destination address is not specified, the ROUTER NITRO EVM address of the runtime should be used.\n\nIf a value is not explicitly provided, use the default specified above.\n\nRespond with a JSON object containing only the extracted information:\n\n\\\\\\`json\n{\n    \"fromToken\": string | null,\n    \"toToken\": string | null,\n    \"fromChain\": string | null,\n    \"toChain\": string | null,\n    \"amount\": string | null,\n    \"toAddress\": string | null\n}\n\\\\\\`\n`;\n","import axios from \"axios\";\ninterface ChainData {\n    name: string;\n    chainId: string;\n    type: string;\n    isLive: boolean;\n    gasToken?: {\n        symbol: string;\n        address: string;\n    };\n}\n\ninterface TokenData {\n    address: string;\n    name: string;\n    decimals: number;\n    chainId: number;\n}\n\nexport class ChainUtils {\n    private chainData: ChainData[] = [];\n    private chainNameMappings: { [key: string]: string[] } = {\n        'arbitrum': ['arbitrum', 'arbitrum one', 'arb', 'arbitrum mainnet'],\n        'ethereum': ['ethereum', 'eth', 'ethereum mainnet', 'ether'],\n        'polygon': ['polygon', 'matic', 'polygon mainnet', 'polygon pos'],\n        'avalanche': ['avalanche', 'avax', 'avalanche c-chain', 'avalanche mainnet'],\n        'binance': ['binance', 'bsc', 'bnb', 'bnb smart chain', 'bnb smart chain mainnet'],\n        'optimism': ['optimism', 'op', 'op mainnet'],\n        'base': ['base', 'base mainnet'],\n        'zksync': ['zksync', 'zksync era', 'zksync mainnet'],\n        'manta': ['manta', 'manta pacific', 'manta pacific mainnet'],\n        'mantle': ['mantle', 'mantle mainnet'],\n        'linea': ['linea', 'linea mainnet'],\n        'scroll': ['scroll', 'scroll mainnet'],\n        'mode': ['mode', 'mode mainnet'],\n        'blast': ['blast', 'blast mainnet'],\n        'polygon-zkevm': ['polygon zkevm', 'polygon zkvm', 'zkevm'],\n        'boba': ['boba', 'boba network'],\n        'metis': ['metis', 'metis andromeda', 'metis mainnet'],\n        'aurora': ['aurora', 'aurora mainnet'],\n        'taiko': ['taiko', 'taiko mainnet'],\n        'rootstock': ['rootstock', 'rsk', 'rootstock mainnet'],\n        'dogechain': ['dogechain', 'dogechain mainnet'],\n        'oasis-sapphire': ['oasis sapphire', 'sapphire'],\n        'xlayer': ['x layer', 'xlayer mainnet'],\n        'rollux': ['rollux', 'rollux mainnet'],\n        '5ire': ['5ire', '5irechain', '5irechain mainnet'],\n        'kyoto': ['kyoto', 'kyoto mainnet'],\n        'vanar': ['vanar', 'vanar mainnet'],\n        'saakuru': ['saakuru', 'saakuru mainnet'],\n        'redbelly': ['redbelly', 'redbelly mainnet'],\n        'shido': ['shido', 'shido mainnet'],\n        'nero': ['nero', 'nero mainnet'],\n        'soneium': ['soneium', 'soneium mainnet'],\n        'hyperliquid': ['hyperliquid', 'hyperliquid mainnet'],\n        'arthera': ['arthera', 'arthera mainnet']\n    };\n\n    constructor(apiResponse: { data: ChainData[] }) {\n        this.chainData = apiResponse.data;\n    }\n\n    private normalizeChainName(input: string): string {\n        const normalized = input.toLowerCase().trim();\n\n        // Iterate through chainNameMappings to find a match\n        for (const [standardName, aliases] of Object.entries(this.chainNameMappings)) {\n            if (aliases.includes(normalized)) {\n                const chainMatch = this.chainData.find(chain =>\n                    aliases.includes(chain.name.toLowerCase()) || chain.name.toLowerCase().includes(standardName) // Match standard name\n                );\n\n                if (chainMatch) {\n                    return chainMatch.name;\n                }\n            }\n        }\n\n        const partialMatch = this.chainData.find(chain =>\n            chain.name.toLowerCase().includes(normalized) ||\n            normalized.includes(chain.name.toLowerCase())\n        );\n\n        if (partialMatch) {\n            return partialMatch.name;\n        }\n\n        return input;\n    }\n\n\n    getChainId(chainName: string): string | null {\n        if (!chainName) return null;\n\n        const normalizedName = this.normalizeChainName(chainName);\n        const chain = this.chainData.find(\n            c => c.name.toLowerCase() === normalizedName.toLowerCase()\n        );\n\n        return chain ? chain.chainId : null;\n    }\n\n    getChainType(chainName: string): string | null {\n        if (!chainName) return null;\n\n        const normalizedName = this.normalizeChainName(chainName);\n        const chain = this.chainData.find(\n            c => c.name.toLowerCase() === normalizedName.toLowerCase()\n        );\n\n        return chain ? chain.type : null;\n    }\n\n    isChainLive(chainName: string): boolean {\n        if (!chainName) return false;\n\n        const normalizedName = this.normalizeChainName(chainName);\n        const chain = this.chainData.find(\n            c => c.name.toLowerCase() === normalizedName.toLowerCase()\n        );\n\n        return chain ? chain.isLive : false;\n    }\n\n    getGasToken(chainName: string): { symbol: string; address: string; } | null {\n        if (!chainName) return null;\n\n        const normalizedName = this.normalizeChainName(chainName);\n        const chain = this.chainData.find(\n            c => c.name.toLowerCase() === normalizedName.toLowerCase()\n        );\n\n        return chain?.gasToken || null;\n    }\n\n    validateChain(chainName: string): {\n        isValid: boolean;\n        chainId: string | null;\n        isLive: boolean;\n        type: string | null;\n        normalizedName: string;\n        message?: string;\n    } {\n        if (!chainName) {\n            return {\n                isValid: false,\n                chainId: null,\n                isLive: false,\n                type: null,\n                normalizedName: '',\n                message: 'Chain name is required'\n            };\n        }\n\n        const normalizedName = this.normalizeChainName(chainName);\n        const chainId = this.getChainId(normalizedName);\n        const isLive = this.isChainLive(normalizedName);\n        const type = this.getChainType(normalizedName);\n\n        const isValid = chainId !== null;\n\n        return {\n            isValid,\n            chainId,\n            isLive,\n            type,\n            normalizedName,\n            message: isValid\n                ? undefined\n                : `Invalid chain name: ${chainName}`\n        };\n    }\n\n    processChainSwap(fromChain: string, toChain: string): {\n        fromChainId: string | null;\n        toChainId: string | null;\n    } {\n        const sourceChain = this.validateChain(fromChain);\n        const destChain = this.validateChain(toChain);\n\n        if (!sourceChain.isValid) {\n            throw new Error(`Invalid source chain: ${fromChain}`);\n        }\n\n        if (!destChain.isValid) {\n            throw new Error(`Invalid destination chain: ${toChain}`);\n        }\n\n        if (!sourceChain.isLive) {\n            throw new Error(`Source chain ${sourceChain.normalizedName} is not currently active`);\n        }\n\n        if (!destChain.isLive) {\n            throw new Error(`Destination chain ${destChain.normalizedName} is not currently active`);\n        }\n\n        return {\n            fromChainId: sourceChain.chainId,\n            toChainId: destChain.chainId\n        };\n    }\n}\n\nexport async function fetchChains(): Promise<{ data: ChainData[] }> {\n    const url = 'https://api.nitroswap.routernitro.com/chain?page=0&limit=10000';\n\n    try {\n        const response = await axios.get(url);\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching chains:', error);\n        throw new Error('Failed to fetch chains.');\n    }\n}\n\nconst tokenCache: { [key: string]: TokenData } = {};\n\nexport async function fetchTokenConfig(chainId: number, token: string): Promise<TokenData> {\n    const cacheKey = `${chainId}-${token.toLowerCase()}`;\n\n    // Check if the token config is already cached\n    if (tokenCache[cacheKey]) {\n        console.log(`Cache hit for ${cacheKey}`);\n        return tokenCache[cacheKey];\n    }\n\n    // prioritizing lowercase first\n    const tokenCases = [token.toLowerCase(), token.toUpperCase()];\n\n    for (const tokenSymbol of tokenCases) {\n        const url = `https://api.nitroswap.routernitro.com/token?&chainId=${chainId}&symbol=${tokenSymbol}`;\n        try {\n            const response = await axios.get(url);\n\n            const tokenData = response.data?.data?.[0];\n            if (tokenData) {\n                tokenCache[cacheKey] = {\n                    address: tokenData.address,\n                    name: tokenData.name,\n                    decimals: tokenData.decimals,\n                    chainId: tokenData.chainId,\n                };\n                return tokenCache[cacheKey];\n            }\n        } catch (error: unknown) {\n            const errorMessage = error instanceof Error \n                ? error.message \n                : 'Unknown error occurred';\n            console.warn(`Error with token symbol \"${tokenSymbol}\": ${errorMessage}`);\n        }\n    }\n\n    throw new Error(`Failed to fetch token config for \"${token}\" on chainId \"${chainId}\"`);\n}\n\ninterface PathfinderQuoteParams {\n    fromTokenAddress: string;\n    toTokenAddress: string;\n    amount: string;\n    fromTokenChainId: number;\n    toTokenChainId: number;\n    partnerId: number;\n}\n\nexport async function fetchPathfinderQuote(params: PathfinderQuoteParams): Promise<unknown> {\n    const { fromTokenAddress, toTokenAddress, amount, fromTokenChainId, toTokenChainId, partnerId } = params;\n\n    const pathfinderUrl = `https://api-beta.pathfinder.routerprotocol.com/api/v2/quote?fromTokenAddress=${fromTokenAddress}&toTokenAddress=${toTokenAddress}&amount=${amount}&fromTokenChainId=${fromTokenChainId}&toTokenChainId=${toTokenChainId}&partnerId=${partnerId}`;\n\n    try {\n        const response = await axios.get(pathfinderUrl);\n        return response.data;\n    } catch (error) {\n        console.error(\"Error fetching Pathfinder quote:\", error instanceof Error ? error.message : String(error));\n        throw new Error(`Pathfinder API call failed: ${error instanceof Error ? error.message : String(error)}`);\n    }\n}\n\n\n// export async function fetchPathfinderQuote(params: PathfinderQuoteParams): Promise<any> {\n//     const { fromTokenAddress, toTokenAddress, amount, fromTokenChainId, toTokenChainId, partnerId } = params;\n\n//     const pathfinderUrl = `https://api-beta.pathfinder.routerprotocol.com/api/v2/quote` +\n//         `?fromTokenAddress=${fromTokenAddress}` +\n//         `&toTokenAddress=${toTokenAddress}` +\n//         `&amount=${amount}` +\n//         `&fromTokenChainId=${fromTokenChainId}` +\n//         `&toTokenChainId=${toTokenChainId}` +\n//         `&partnerId=${partnerId}`;\n\n//     try {\n//         const response = await axios.get(pathfinderUrl);\n//         return response.data;\n//     } catch (error) {\n//         console.error(\"Error fetching Pathfinder quote:\", error.message);\n//         throw new Error(`Pathfinder API call failed: ${error.message}`);\n//     }\n// }\n","import { IAgentRuntime } from \"@elizaos/core\";\nimport { z } from \"zod\";\n\nexport const routerNitroEnvSchema = z.object({\n    ROUTER_NITRO_EVM_ADDRESS: z.string().min(1, \"Address is required for interacting with Router Nitro\"),\n    ROUTER_NITRO_EVM_PRIVATE_KEY: z.string().min(1, \"Private key is required for interacting with Router Nitro\"),\n});\n\nexport type RouterNitroConfig = z.infer<typeof routerNitroEnvSchema>;\n\nexport async function validateRouterNitroConfig(\n    runtime: IAgentRuntime\n): Promise<RouterNitroConfig> {\n    try {\n        const config = {\n            ROUTER_NITRO_EVM_ADDRESS:\n                runtime.getSetting(\"ROUTER_NITRO_EVM_ADDRESS\") ||\n                process.env.ROUTER_NITRO_EVM_ADDRESS,\n            ROUTER_NITRO_EVM_PRIVATE_KEY:\n                runtime.getSetting(\"ROUTER_NITRO_EVM_PRIVATE_KEY\") ||\n                process.env.ROUTER_NITRO_EVM_PRIVATE_KEY,\n        };\n        // console.log(\"Router Nitro config: \", config);\n\n        return routerNitroEnvSchema.parse(config);\n    } catch (error) {\n        if (error instanceof z.ZodError) {\n            const errorMessages = error.errors\n                .map((err) => `${err.path.join(\".\")}: ${err.message}`)\n                .join(\"\\n\");\n            throw new Error(\n                `Router Nitro configuration validation failed:\\n${errorMessages}`\n            );\n        }\n        throw error;\n    }\n}","import axios from 'axios';\nimport { ethers } from 'ethers'\nimport { erc20Abi } from 'viem';\n\nexport const checkUserBalance = async (wallet, tokenAddress: string, _decimals) => {\n    try {\n        if (!wallet.provider) {\n            throw new Error(\"Wallet must be connected to a provider.\");\n        }\n        const tokenContract = new ethers.Contract(tokenAddress, erc20Abi, wallet.provider);\n        const address = await wallet.getAddress();\n        const balance = await tokenContract.balanceOf(address);\n        return balance.toString();\n    } catch (_error) {  // Changed from 'error' to '_error' to indicate it's intentionally unused\n        throw new Error(\"Unable to fetch balance\");\n    }\n};\n\nexport const checkNativeTokenBalance = async (wallet, _decimals) => {\n\n    try {\n        if (!wallet.provider) {\n            throw new Error(\"Wallet must be connected to a provider.\");\n        }\n\n        const address = await wallet.getAddress();\n        const balance = await wallet.provider.getBalance(address);\n        return balance.toString();\n    } catch (_error) {  // Changed from 'error' to '_error' to indicate it's intentionally unused\n        throw new Error(\"Unable to fetch native token balance\");\n    }\n};\n\nexport const checkAndSetAllowance = async (wallet, tokenAddress, approvalAddress, amount) => {\n    if (tokenAddress === ethers.ZeroAddress || tokenAddress.toLowerCase() === '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee') {\n        console.log(\"Native token detected; no approval needed.\");\n        return;\n    }\n\n    console.log(`Checking allowance for token ${tokenAddress} and approval address ${approvalAddress}`);\n\n    const erc20ReadOnly = new ethers.Contract(tokenAddress, erc20Abi, wallet.provider);\n    const walletAddress = await wallet.getAddress();\n\n    try {\n        const allowance = await erc20ReadOnly.allowance(walletAddress, approvalAddress);\n        console.log(\"Current allowance:\", allowance.toString());\n\n        if (allowance < amount) {\n            const erc20WithSigner = new ethers.Contract(tokenAddress, erc20Abi, wallet);\n            const approveTx = await erc20WithSigner.approve(approvalAddress, amount);\n\n            console.log(`Approve transaction sent: ${approveTx.hash}`);\n            await approveTx.wait();\n            console.log(`Approved successfully: ${approveTx.hash}`);\n        } else {\n            console.log(\"Sufficient allowance already set.\");\n        }\n    } catch (error) {\n        console.error(\"Error during allowance check or approval:\", error);\n    }\n};\n\nexport const getSwapTransaction = async (quoteData, senderAddress, receiverAddress) => {\n    const txDataUrl = \"https://api-beta.pathfinder.routerprotocol.com/api/v2/transaction\";\n\n    const requestData = {\n        ...quoteData,\n        senderAddress: senderAddress,\n        receiverAddress: receiverAddress\n    };\n\n    const config = {\n        method: 'post',\n        maxBodyLength: Number.POSITIVE_INFINITY,\n        url: txDataUrl,\n        headers: {\n            'content-type': 'application/json'\n        },\n        data: requestData\n    };\n\n    try {\n        const res = await axios.request(config);\n        return res.data;\n    } catch (e) {\n        console.error(`Fetching tx data from pathfinder: ${e}`);\n    }\n}\n\n","import * as viemChains from \"viem/chains\";\n\n// Create chains object from all available viem chains\nconst chains = Object.values(viemChains).reduce((acc, chain) => {\n  if (chain && typeof chain === 'object' && 'id' in chain) {\n    acc[chain.id] = chain;\n  }\n  return acc;\n}, {});\n\nexport const getRpcUrlFromChainId = (chainId) => {\n  const chain = chains[chainId];\n  if (!chain) {\n    throw new Error(`Chain ID ${chainId} not found`);\n  }\n  \n  return chain.rpcUrls.default.http[0];\n}\n\n// Helper to get chain object\nexport const getChainFromChainId = (chainId) => {\n  const chain = chains[chainId];\n  if (!chain) {\n    throw new Error(`Chain ID ${chainId} not found`);\n  }\n  \n  return chain;\n}\n\nexport const getBlockExplorerFromChainId = (chainId) => {\n    const chain = chains[chainId];\n    if (!chain) {\n      throw new Error(`Chain ID ${chainId} not found`);\n    }\n    \n    if (!chain.blockExplorers || !chain.blockExplorers.default) {\n      throw new Error(`Block explorer not found for Chain ID ${chainId}`);\n    }\n  \n    return {\n      url: chain.blockExplorers.default.url,\n    };\n};\n\nexport { chains };\n","import { Plugin } from \"@elizaos/core\";\nimport { executeSwapAction } from \"./actions/executeSwap.ts\";\n\n\nexport const nitroPlugin: Plugin = {\n    name: \"Nitro\",\n    description: \"Nitro Plugin for Eliza\",\n    actions: [executeSwapAction],\n    evaluators: [],\n    providers: [],\n};\n\nexport default nitroPlugin;\n"],"mappings":"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","names":["axios","ethers","ethers"]}